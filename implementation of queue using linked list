class Node{
    int data;
    Node next;
    Node(int new_data){
        data=new_data;
        next=null;
    }
}
class Queue{
    Node front,rare;
    Queue(){
        front=rare=null;
    }
    Boolean isEmpty(){
        return front==null&&rare==null;
    }
    void  enqueue(int new_data){
        Node new_node=new Node(new_data);
        if(rare==null){
            front=rare=new_node;
            return;
        }
        rare.next=new_node;
        rare=new_node;
    }
    void dequeue(){
        if(isEmpty()){
            System.out.println("Queue underflow");
            return;
        }
        Node temp=front;
        front=front.next;
        if(front==null)rare=null;
    }
    int getfront(){
        if(isEmpty()){
            System.out.println("Queue is empty");
            return Integer.MIN_VALUE;
        }
        return front.data;
    }
     int getrare(){
        if(isEmpty()){
            System.out.println("Queue is empty");
            return Integer.MIN_VALUE;
        }
        return rare.data;
    }
}
    public class Main{
        public static void main(String[] args){
            Queue q=new Queue();
            q.enqueue(10);
            q.enqueue(20);
            q.enqueue(30);
            System.out.println("Front= "+q.getfront());
            System.out.println("rare= "+q.getrare());
        }
    }
    
