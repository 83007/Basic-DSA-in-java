public class MaxHeap{
    private int[] Heap;
    private int size;
    private int maxsize;
    public MaxHeap(int maxsize)
{
    this.maxsize=maxsize;
    this.size=0;
    Heap=new int[this.maxsize];
}
private int parent(int pos)
    {
        return (pos-1)/2;
    }
    private int leftchild(int pos){
        return (2*pos)+1;
    }
    private int rightchild(int pos){
        return (2*pos)+2;
    }
    private boolean isLeaf(int pos){
        if(pos>(size/2)&&pos<=size)return true;
        else return false;
    }
    private void swap(int fpos,int spos){
        int temp=Heap[fpos];
        Heap[fpos]=Heap[spos];
        heap[spos]=temp;
    }
    private void maxHeapify(int pos){
        if(isLeaf(pos))return;
        if(Heap[pos]<Heap[leftchild(pos)]||Heap[pos]<Heap[rightchild(pos)]){
            if(Heap[leftchild(pos)]>Heap[rightchild(pos)]){
                swap(pos,leftchild(pos));
                maxHeapify(leftchild(pos));
            }
            else{
                swap(pos,rightchild(pos));
                maxHeapify(rightcild(pos));
            }
        }
    }
    public void insert(int element){
        Heap[size]=element;
        int current=size;
        while(Heap[current]>Heap[parent(current)]){
            swap(current,parent(current));
            current=parent(current);
        }
        size++;
    }
    public void print(){
        for(int i=0;i<size/2;i++){
            System.out.print("parent Node: "+Heap[i]);
            if(leftchild[i]<size)System.out.print("Left child Node : "+Heap[leftchild(i)]);
            if(rightchild[i]<size)System.out.print("Right child Node : "+Heap[rightchild(i)]);
            System.out.println();
        }
    }
    public int extractMax(){
        int popped=Heap[0];
        Heap[0]=Heap[--size];
        maxHeapify(0);
        return popped;
        
    }
    public static void main(String[] args){
        MaxHeap maxHeap=new MaxHeap(10);
        maxHeap.insert(5);
         maxHeap.insert(3);
          maxHeap.insert(17);
           maxHeap.insert(10);
            maxHeap.insert(84);
            maxHeap.print();
            System.out.println("The maxvalue is: "+maxHeap.extractMax());
    }
}
